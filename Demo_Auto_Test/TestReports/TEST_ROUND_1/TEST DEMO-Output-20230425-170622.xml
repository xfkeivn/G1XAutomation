<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.0 on win32)" generated="20230425 17:06:22.068" rpa="false" schemaversion="3">
<suite id="s1" name="TEST DEMO" source="D:\Workspace\GX1\G1XAutomation\Demo_Auto_Test\TestProtocols\TEST_DEMO.txt">
<kw name="Init Test" library="GX1Testlib" type="SETUP">
<doc>Description:
 This should be called before any test can started for GX1
Arguments:</doc>
<msg timestamp="20230425 17:06:22.317" level="INFO">Loading the project at D:\Workspace\GX1\G1XAutomation\Demo_Auto_Test</msg>
<msg timestamp="20230425 17:06:22.347" level="INFO">Squish Hook 192.168.80.130, gx1, C:\Users\xuf\.ssh\bsci</msg>
<msg timestamp="20230425 17:06:22.347" level="INFO">Demo_Auto_Test has been loaded successfully</msg>
<msg timestamp="20230425 17:06:22.363" level="INFO">connecting to device</msg>
<msg timestamp="20230425 17:06:22.372" level="INFO">COM Port COM1 created successfully</msg>
<msg timestamp="20230425 17:06:22.482" level="INFO">GX1 Simulator is started</msg>
<msg timestamp="20230425 17:06:24.888" level="INFO">Squish tester is started</msg>
<msg timestamp="20230425 17:06:24.888" level="INFO">found router: gx1.development.squish_server</msg>
<status status="PASS" starttime="20230425 17:06:22.316" endtime="20230425 17:06:24.888"/>
</kw>
<test id="s1-t1" name="TEST_CASE_1_COMMAND_SIMULATION" line="8">
<kw name="this is the test demo, started">
<msg timestamp="20230425 17:06:24.891" level="FAIL">No keyword with name 'this is the test demo, started' found.</msg>
<status status="FAIL" starttime="20230425 17:06:24.891" endtime="20230425 17:06:24.891"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.891" endtime="20230425 17:06:24.891"/>
</kw>
<kw name="Mouse Xy" library="GX1Testlib">
<arg>722</arg>
<arg>161</arg>
<doc>Perform a mouse click on the active window.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.892" endtime="20230425 17:06:24.892"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.892" endtime="20230425 17:06:24.892"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.892" endtime="20230425 17:06:24.892"/>
</kw>
<kw name="Mouse Xy" library="GX1Testlib">
<arg>426</arg>
<arg>718</arg>
<doc>Perform a mouse click on the active window.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.893" endtime="20230425 17:06:24.893"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.893" endtime="20230425 17:06:24.893"/>
</kw>
<kw name="Start Scenario" library="GX1Testlib">
<arg>ImpedanceRamp</arg>
<doc>Start the stimulation scenario by its alias
:param scenario_name:
:return:</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.893" endtime="20230425 17:06:24.893"/>
</kw>
<kw name="Start Scenario" library="GX1Testlib">
<arg>RampMeasure</arg>
<doc>Start the stimulation scenario by its alias
:param scenario_name:
:return:</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.894" endtime="20230425 17:06:24.894"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.894" endtime="20230425 17:06:24.894"/>
</kw>
<kw name="Stop Scenario" library="GX1Testlib">
<arg>RampMeasure</arg>
<doc>Stop the scenario by its alias
:param scenario_name:
:return:</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.894" endtime="20230425 17:06:24.894"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.895" endtime="20230425 17:06:24.895"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.895" endtime="20230425 17:06:24.895"/>
</kw>
<kw name="Start Scenario" library="GX1Testlib">
<arg>RampMeasure</arg>
<doc>Start the stimulation scenario by its alias
:param scenario_name:
:return:</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.895" endtime="20230425 17:06:24.895"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.896" endtime="20230425 17:06:24.896"/>
</kw>
<kw name="Stop Scenario" library="GX1Testlib">
<arg>RampMeasure</arg>
<doc>Stop the scenario by its alias
:param scenario_name:
:return:</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.896" endtime="20230425 17:06:24.896"/>
</kw>
<kw name="Stop Scenario" library="GX1Testlib">
<arg>ImpedanceRamp</arg>
<doc>Stop the scenario by its alias
:param scenario_name:
:return:</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.896" endtime="20230425 17:06:24.896"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.897" endtime="20230425 17:06:24.897"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>this is the test demo, started</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.897" endtime="20230425 17:06:24.897"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<status status="NOT RUN" starttime="20230425 17:06:24.897" endtime="20230425 17:06:24.897"/>
</kw>
<doc>This test case is for demo for the features of DVTFront of GX1.</doc>
<tag>DEMO</tag>
<tag>MAINPAGE</tag>
<tag>SCREENSHOT</tag>
<tag>stimulation</tag>
<status status="FAIL" starttime="20230425 17:06:24.889" endtime="20230425 17:06:24.898">No keyword with name 'this is the test demo, started' found.</status>
</test>
<test id="s1-t2" name="TEST_CASE_2_CLICK_AND_SCREEN_SHOT" line="32">
<kw name="Log" library="BuiltIn">
<arg>this is the test demo, started</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230425 17:06:24.900" level="INFO">this is the test demo, started</msg>
<status status="PASS" starttime="20230425 17:06:24.899" endtime="20230425 17:06:24.900"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:25.911" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:24.900" endtime="20230425 17:06:25.911"/>
</kw>
<kw name="Mouse Click" library="GX1Testlib">
<arg>OneTouch</arg>
<doc>If object is applicable, perform a mouse click by passing in the Squish object reference.</doc>
<status status="PASS" starttime="20230425 17:06:25.911" endtime="20230425 17:06:26.457"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:31.462" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20230425 17:06:26.457" endtime="20230425 17:06:31.462"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<msg timestamp="20230425 17:06:31.587" level="INFO" html="true">&lt;a href="Img_fdd5c34b-5ed1-4109-8dfe-8e2f9125f6ca.png"&gt;&lt;img src="Img_fdd5c34b-5ed1-4109-8dfe-8e2f9125f6ca.png" width="400"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20230425 17:06:31.462" endtime="20230425 17:06:31.588"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:32.592" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:31.588" endtime="20230425 17:06:32.592"/>
</kw>
<kw name="Mouse Click" library="GX1Testlib">
<arg>Stimulation</arg>
<doc>If object is applicable, perform a mouse click by passing in the Squish object reference.</doc>
<status status="PASS" starttime="20230425 17:06:32.592" endtime="20230425 17:06:32.998"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:34.003" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:32.999" endtime="20230425 17:06:34.003"/>
</kw>
<kw name="Set Command Response" library="GX1Testlib">
<arg>C046</arg>
<arg>u8_OutputStatus=1</arg>
<arg>u8_ButtonStatus=1</arg>
<doc>Set the response data
:param command_code: the command code not the response code
:param response_data: the leaf field of the response data
:return:</doc>
<status status="PASS" starttime="20230425 17:06:34.004" endtime="20230425 17:06:34.004"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:35.011" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:34.005" endtime="20230425 17:06:35.011"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<msg timestamp="20230425 17:06:35.124" level="INFO" html="true">&lt;a href="Img_f761c327-b6f5-4a48-8a2e-7aa88509fbfa.png"&gt;&lt;img src="Img_f761c327-b6f5-4a48-8a2e-7aa88509fbfa.png" width="400"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20230425 17:06:35.012" endtime="20230425 17:06:35.124"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:36.140" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:35.125" endtime="20230425 17:06:36.140"/>
</kw>
<kw name="Set Command Response" library="GX1Testlib">
<arg>C046</arg>
<arg>u8_OutputStatus=0</arg>
<arg>u8_ButtonStatus=1</arg>
<doc>Set the response data
:param command_code: the command code not the response code
:param response_data: the leaf field of the response data
:return:</doc>
<status status="PASS" starttime="20230425 17:06:36.140" endtime="20230425 17:06:36.141"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:37.144" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:36.141" endtime="20230425 17:06:37.144"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<msg timestamp="20230425 17:06:37.256" level="INFO" html="true">&lt;a href="Img_cfdbb23d-ce29-4ff7-92c7-a415e4a27af4.png"&gt;&lt;img src="Img_cfdbb23d-ce29-4ff7-92c7-a415e4a27af4.png" width="400"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20230425 17:06:37.144" endtime="20230425 17:06:37.256"/>
</kw>
<kw name="Mouse Click" library="GX1Testlib">
<arg>PulseRF</arg>
<doc>If object is applicable, perform a mouse click by passing in the Squish object reference.</doc>
<status status="PASS" starttime="20230425 17:06:37.256" endtime="20230425 17:06:37.645"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<msg timestamp="20230425 17:06:37.795" level="INFO" html="true">&lt;a href="Img_d4e2777f-40fc-4ad2-a974-77c65f906e73.png"&gt;&lt;img src="Img_d4e2777f-40fc-4ad2-a974-77c65f906e73.png" width="400"&gt;&lt;/a&gt;</msg>
<status status="PASS" starttime="20230425 17:06:37.645" endtime="20230425 17:06:37.795"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>this is the test demo, started</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230425 17:06:37.797" level="INFO">this is the test demo, started</msg>
<status status="PASS" starttime="20230425 17:06:37.795" endtime="20230425 17:06:37.797"/>
</kw>
<doc>This is the second case</doc>
<tag>POWER</tag>
<tag>VOLTAGE</tag>
<status status="PASS" starttime="20230425 17:06:24.898" endtime="20230425 17:06:37.797"/>
</test>
<test id="s1-t3" name="TEST_CASE_3_COMMAND_SEARCH" line="54">
<kw name="Log" library="BuiltIn">
<arg>this test is for testing the search command logged in the queue</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230425 17:06:37.799" level="INFO">this test is for testing the search command logged in the queue</msg>
<status status="PASS" starttime="20230425 17:06:37.799" endtime="20230425 17:06:37.799"/>
</kw>
<kw name="Clean Command Logging Queue" library="GX1Testlib">
<doc>Clean the queue
:return:</doc>
<status status="PASS" starttime="20230425 17:06:37.799" endtime="20230425 17:06:37.800"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:42.807" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20230425 17:06:37.800" endtime="20230425 17:06:42.807"/>
</kw>
<kw name="Find Logged Commands" library="GX1Testlib">
<var>@{command_list}</var>
<arg>0xC049</arg>
<arg>0</arg>
<arg>ar_measured_channels[0].u8_TempRefAvailable=1</arg>
<doc>To find the command or response in the queue
:param command_code: the command code or response code
:param start_seq: from where to search forward
:param kwargs: the matching condition of the field value, key pairs
:return:</doc>
<msg timestamp="20230425 17:06:42.808" level="INFO">@{command_list} = [ ]</msg>
<status status="PASS" starttime="20230425 17:06:42.807" endtime="20230425 17:06:42.808"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${message_count}</var>
<arg>${command_list}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20230425 17:06:42.809" level="INFO">Length is 0</msg>
<msg timestamp="20230425 17:06:42.809" level="INFO">${message_count} = 0</msg>
<status status="PASS" starttime="20230425 17:06:42.808" endtime="20230425 17:06:42.809"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${command_list[0].data.ar_measured_channels[0].u16_TempRef}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230425 17:06:42.810" level="FAIL">Resolving variable '${command_list[0].data.ar_measured_channels[0].u16_TempRef}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20230425 17:06:42.809" endtime="20230425 17:06:42.810"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${command_list[1].data.ar_measured_channels[0].u16_TempRef}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20230425 17:06:42.810" endtime="20230425 17:06:42.810"/>
</kw>
<tag>STIMULATION</tag>
<tag>VOLTAGE</tag>
<status status="FAIL" starttime="20230425 17:06:37.798" endtime="20230425 17:06:42.810">Resolving variable '${command_list[0].data.ar_measured_channels[0].u16_TempRef}' failed: IndexError: list index out of range</status>
</test>
<test id="s1-t4" name="TEST_CASE_4_TEST_OCR" line="64">
<kw name="Mouse Xy" library="GX1Testlib">
<arg>722</arg>
<arg>161</arg>
<doc>Perform a mouse click on the active window.</doc>
<status status="PASS" starttime="20230425 17:06:42.822" endtime="20230425 17:06:43.162"/>
</kw>
<kw name="Mouse Xy" library="GX1Testlib">
<arg>109</arg>
<arg>722</arg>
<doc>Perform a mouse click on the active window.</doc>
<status status="PASS" starttime="20230425 17:06:43.162" endtime="20230425 17:06:43.507"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1S</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:44.511" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:43.508" endtime="20230425 17:06:44.511"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<var>${screen_shot_path}</var>
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<msg timestamp="20230425 17:06:44.605" level="INFO" html="true">&lt;a href="Img_7b5c98c8-9719-4a64-9771-b070b21324e8.png"&gt;&lt;img src="Img_7b5c98c8-9719-4a64-9771-b070b21324e8.png" width="400"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:44.605" level="INFO">${screen_shot_path} = D:\Workspace\GX1\G1XAutomation\Demo_Auto_Test\TestReports\TEST_ROUND_1\Img_7b5c98c8-9719-4a64-9771-b070b21324e8.png</msg>
<status status="PASS" starttime="20230425 17:06:44.511" endtime="20230425 17:06:44.605"/>
</kw>
<kw name="Get Text" library="GX1Testlib">
<var>${text1}</var>
<arg>${screen_shot_path}</arg>
<arg>ElectrodeSetup</arg>
<arg>Monopolar</arg>
<doc>Get the text from the image and the feature rect
:param screenshot_path: the image path that need to be verified.
:param image_alias: the alias of the sample image
:param rect_alias: the alias of the sample feature rect
:param lang: the language of the text
:return: the text</doc>
<msg timestamp="20230425 17:06:45.037" level="INFO" html="true">&lt;a href="Img_50f4be44-63d4-4d0f-9e53-8bccea40059e.png"&gt;&lt;img src="Img_50f4be44-63d4-4d0f-9e53-8bccea40059e.png" width="118"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:45.037" level="INFO">${text1} = Monopolar</msg>
<status status="PASS" starttime="20230425 17:06:44.605" endtime="20230425 17:06:45.037"/>
</kw>
<kw name="Get Text" library="GX1Testlib">
<var>${text2}</var>
<arg>${screen_shot_path}</arg>
<arg>ElectrodeSetup</arg>
<arg>Bipolar</arg>
<doc>Get the text from the image and the feature rect
:param screenshot_path: the image path that need to be verified.
:param image_alias: the alias of the sample image
:param rect_alias: the alias of the sample feature rect
:param lang: the language of the text
:return: the text</doc>
<msg timestamp="20230425 17:06:45.168" level="INFO" html="true">&lt;a href="Img_aa586c1a-2109-45ef-9422-5f589c6d091a.png"&gt;&lt;img src="Img_aa586c1a-2109-45ef-9422-5f589c6d091a.png" width="95"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:45.169" level="INFO">${text2} = Bipolar</msg>
<status status="PASS" starttime="20230425 17:06:45.038" endtime="20230425 17:06:45.169"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${text1}</arg>
<arg>Monopolar</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230425 17:06:45.169" endtime="20230425 17:06:45.169"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${text2}</arg>
<arg>Bipolar</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20230425 17:06:45.169" endtime="20230425 17:06:45.170"/>
</kw>
<status status="PASS" starttime="20230425 17:06:42.822" endtime="20230425 17:06:45.170"/>
</test>
<test id="s1-t5" name="TEST_CASE_5_TEST_COMPARE" line="74">
<kw name="Mouse Click" library="GX1Testlib">
<arg>PulseRF</arg>
<doc>If object is applicable, perform a mouse click by passing in the Squish object reference.</doc>
<status status="PASS" starttime="20230425 17:06:45.172" endtime="20230425 17:06:45.509"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20230425 17:06:46.522" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20230425 17:06:45.509" endtime="20230425 17:06:46.522"/>
</kw>
<kw name="Screen Shot" library="GX1Testlib">
<var>${image_path}</var>
<doc>Capture the image from Screen and embedded  the image captured to the report
:param embedded_image_to_report: whether the image should be embedded into report
:return: the image file location</doc>
<msg timestamp="20230425 17:06:46.617" level="INFO" html="true">&lt;a href="Img_6adf2231-facb-47c9-a911-f4b256585751.png"&gt;&lt;img src="Img_6adf2231-facb-47c9-a911-f4b256585751.png" width="400"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.617" level="INFO">${image_path} = D:\Workspace\GX1\G1XAutomation\Demo_Auto_Test\TestReports\TEST_ROUND_1\Img_6adf2231-facb-47c9-a911-f4b256585751.png</msg>
<status status="PASS" starttime="20230425 17:06:46.522" endtime="20230425 17:06:46.617"/>
</kw>
<kw name="Compare Feature Rect" library="GX1Testlib">
<var>${result}</var>
<arg>${image_path}</arg>
<arg>PulsedRF</arg>
<arg>Camera</arg>
<doc>To compare the consistency of image  feature rect
:param screenshot_path: the image path that need to be verified.
:param sample_image_alias: the alias of the sample image
:param sample_rect_alias: the alias of the sample feature rect
:return: the consistency</doc>
<msg timestamp="20230425 17:06:46.637" level="INFO" html="true">&lt;a href="Img_2e47b166-3668-4898-9716-f4718eff3bdb.png"&gt;&lt;img src="Img_2e47b166-3668-4898-9716-f4718eff3bdb.png" width="64"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.638" level="INFO" html="true">&lt;a href="Img_2e252584-3ecc-4af0-8bde-4a2513147974.png"&gt;&lt;img src="Img_2e252584-3ecc-4af0-8bde-4a2513147974.png" width="64"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.670" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20230425 17:06:46.617" endtime="20230425 17:06:46.670"/>
</kw>
<kw name="Compare Feature Rect" library="GX1Testlib">
<var>${result}</var>
<arg>${image_path}</arg>
<arg>PulsedRF</arg>
<arg>Folder</arg>
<doc>To compare the consistency of image  feature rect
:param screenshot_path: the image path that need to be verified.
:param sample_image_alias: the alias of the sample image
:param sample_rect_alias: the alias of the sample feature rect
:return: the consistency</doc>
<msg timestamp="20230425 17:06:46.686" level="INFO" html="true">&lt;a href="Img_2795328f-2c43-4596-b62a-73da04c84cd3.png"&gt;&lt;img src="Img_2795328f-2c43-4596-b62a-73da04c84cd3.png" width="63"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.687" level="INFO" html="true">&lt;a href="Img_b0e31367-7e66-4794-b1b3-6a60d2ca2950.png"&gt;&lt;img src="Img_b0e31367-7e66-4794-b1b3-6a60d2ca2950.png" width="63"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.707" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20230425 17:06:46.670" endtime="20230425 17:06:46.707"/>
</kw>
<kw name="Compare Feature Rect" library="GX1Testlib">
<var>${result}</var>
<arg>${image_path}</arg>
<arg>PulsedRF</arg>
<arg>Setting</arg>
<doc>To compare the consistency of image  feature rect
:param screenshot_path: the image path that need to be verified.
:param sample_image_alias: the alias of the sample image
:param sample_rect_alias: the alias of the sample feature rect
:return: the consistency</doc>
<msg timestamp="20230425 17:06:46.725" level="INFO" html="true">&lt;a href="Img_40d7fb04-14d3-469f-8212-89d68ab1da0e.png"&gt;&lt;img src="Img_40d7fb04-14d3-469f-8212-89d68ab1da0e.png" width="61"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.727" level="INFO" html="true">&lt;a href="Img_e96418c0-c32d-4bd6-bb38-fbd389865f29.png"&gt;&lt;img src="Img_e96418c0-c32d-4bd6-bb38-fbd389865f29.png" width="61"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230425 17:06:46.747" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20230425 17:06:46.708" endtime="20230425 17:06:46.747"/>
</kw>
<status status="PASS" starttime="20230425 17:06:45.171" endtime="20230425 17:06:46.748"/>
</test>
<kw name="Close Test" library="GX1Testlib" type="TEARDOWN">
<doc>Description:
Close all and cleanup after the test is done
exceptions.
Arguments:
    None
Return Value:
    None
Examples:
|close_test |</doc>
<msg timestamp="20230425 17:06:46.779" level="INFO">disconnecting from device</msg>
<msg timestamp="20230425 17:06:46.785" level="INFO">GX1 Simulator is stopped</msg>
<msg timestamp="20230425 17:06:46.817" level="INFO">Squish tester is stopped</msg>
<status status="PASS" starttime="20230425 17:06:46.750" endtime="20230425 17:06:46.818"/>
</kw>
<meta name="FW_VERSION">2.0</meta>
<meta name="SW_VERSION">1.0</meta>
<status status="FAIL" starttime="20230425 17:06:22.085" endtime="20230425 17:06:46.818"/>
</suite>
<statistics>
<total>
<stat pass="3" fail="2" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">DEMO</stat>
<stat pass="0" fail="1" skip="0">MAINPAGE</stat>
<stat pass="1" fail="0" skip="0">POWER</stat>
<stat pass="0" fail="1" skip="0">SCREENSHOT</stat>
<stat pass="0" fail="2" skip="0">stimulation</stat>
<stat pass="1" fail="1" skip="0">VOLTAGE</stat>
</tag>
<suite>
<stat pass="3" fail="2" skip="0" id="s1" name="TEST DEMO">TEST DEMO</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
